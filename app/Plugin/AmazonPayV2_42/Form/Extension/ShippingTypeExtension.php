<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.3   |
    |              on 2022-12-15 15:50:07              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
namespace Plugin\AmazonPayV2_42\Form\Extension;use Eccube\Common\EccubeConfig;use Eccube\Entity\Payment;use Eccube\Exception\ShoppingException;use Eccube\Form\Type\Shopping\ShippingType;use Eccube\Repository\PaymentOptionRepository;use Plugin\AmazonPayV2_42\Service\Method\AmazonPay;use Symfony\Bridge\Doctrine\Form\Type\EntityType;use Symfony\Component\Form\AbstractTypeExtension;use Symfony\Component\Form\Extension\Core\Type\ChoiceType;use Symfony\Component\Form\FormEvent;use Symfony\Component\Form\FormEvents;use Symfony\Component\Form\FormInterface;use Symfony\Component\Form\FormBuilderInterface;use Symfony\Component\HttpFoundation\RequestStack;use Symfony\Component\Validator\Constraints\NotBlank;class ShippingTypeExtension extends AbstractTypeExtension{public function __construct(RequestStack $requestStack, PaymentOptionRepository $paymentOptionRepository, EccubeConfig $eccubeConfig){goto NYGBi;NYGBi:$this->requestStack = $requestStack;goto Tsu27;SwBIk:$this->eccubeConfig = $eccubeConfig;goto M4QIb;Tsu27:$this->paymentOptionRepository = $paymentOptionRepository;goto SwBIk;M4QIb:}public function buildForm(FormBuilderInterface $builder, array $options){$self = $this;$builder->addEventListener(FormEvents::POST_SET_DATA, function (FormEvent $event) use($self) {goto LsTOt;k7CBH:WmO4a:goto RyJPy;TtvNH:$Shipping->setDelivery($Delivery);goto NuzEs;LsTOt:$Shipping = $event->getData();goto WeIgX;kg6bz:if (!(preg_match('/shopping\\/amazon_pay/', $uri) == true)) {goto sbUBG;}goto E02wF;nlero:return;goto Wh7MX;cUOT7:$Deliveries = $this->getDeliveryChoices($form);goto IrBcE;IrBcE:$Deliveries = $this->removeNotAmazonPayChoice($Deliveries);goto ninRK;sm4Ov:$uri = $request->getUri();goto kg6bz;T8t1M:if (!($Payment && $Payment->getMethodClass() === AmazonPay::class && preg_match('/shopping_coupon/', $referer))) {goto MBtWQ;}goto m14Us;qsUnO:MBtWQ:goto sm4Ov;NuzEs:$Shipping->setShippingDeliveryName($Delivery->getName());goto k7CBH;UD2BZ:$referer = $request->headers->get('referer');goto EqPvK;EqPvK:$Order = $Shipping->getOrder();goto fAGSc;RyJPy:$this->addDeliveryForm($form, $Deliveries);goto FDm2J;ninRK:if (!(is_null($Shipping->getDelivery()) && ($Delivery = current($Deliveries)))) {goto WmO4a;}goto TtvNH;m14Us:return;goto qsUnO;Wh7MX:MTBLw:goto Q4pgT;WeIgX:if (!(null === $Shipping || !$Shipping->getId())) {goto MTBLw;}goto nlero;FDm2J:sbUBG:goto Ji6i4;Q4pgT:$request = $this->requestStack->getMasterRequest();goto UD2BZ;fAGSc:$Payment = $Order->getPayment();goto T8t1M;E02wF:$form = $event->getForm();goto cUOT7;Ji6i4:});}private function getDeliveryChoices(FormInterface $form){return $form->get('Delivery')->getConfig()->getAttribute('choice_list')->getChoices();}private function removeNotAmazonPayChoice($Deliveries){goto uGkex;NwxHT:return $Deliveries;goto NDbwh;uGkex:foreach ($Deliveries as $key => $Delivery) {goto neola;qthjU:if ($amazonPayFlg) {goto HJ3ld;}goto K7hd5;K7hd5:unset($Deliveries[$key]);goto xwrlf;bUamf:TNGZu:goto qthjU;tWC0U:$amazonPayFlg = false;goto nMrD_;neola:$PaymentOptions = $Delivery->getPaymentOptions();goto tWC0U;nMrD_:foreach ($PaymentOptions as $PaymentOption) {goto P68QA;dWa5g:L94Eg:goto aOAvu;F393S:if (!($Payment->getMethodClass() === AmazonPay::class)) {goto L94Eg;}goto HThoV;yf7ff:goto TNGZu;goto dWa5g;aOAvu:nv3OY:goto vPiPF;P68QA:$Payment = $PaymentOption->getPayment();goto F393S;HThoV:$amazonPayFlg = true;goto yf7ff;vPiPF:}goto bUamf;GxU7S:A_lYk:goto RyTs3;xwrlf:HJ3ld:goto GxU7S;RyTs3:}goto RZABM;RZABM:Tk5iK:goto NwxHT;NDbwh:}private function addDeliveryForm(FormInterface $form, array $choices){$form->add('Delivery', EntityType::class, ['required' => false, 'label' => 'shipping.label.delivery_hour', 'class' => 'Eccube\\Entity\\Delivery', 'choice_label' => 'name', 'choices' => $choices, 'placeholder' => false, 'constraints' => [new NotBlank()]]);}public function getExtendedType(){return ShippingType::class;}public static function getExtendedTypes() : iterable{return [ShippingType::class];}}