<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.3   |
    |              on 2022-12-15 15:50:07              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
namespace Plugin\AmazonPayV2_42\Form\Extension;use Eccube\Entity\Payment;use Eccube\Form\Type\Shopping\OrderType;use Plugin\AmazonPayV2_42\Service\Method\AmazonPay;use Symfony\Bridge\Doctrine\Form\Type\EntityType;use Symfony\Component\Form\AbstractTypeExtension;use Symfony\Component\Form\FormEvent;use Symfony\Component\Form\FormEvents;use Symfony\Component\Form\FormInterface;use Symfony\Component\Form\FormBuilderInterface;use Symfony\Component\HttpFoundation\RequestStack;use Symfony\Component\Validator\Constraints\NotBlank;class OrderTypeExtension extends AbstractTypeExtension{public function __construct(RequestStack $requestStack){$this->requestStack = $requestStack;}public function buildForm(FormBuilderInterface $builder, array $options){goto PVbcl;PL1rw:$builder->addEventListener(FormEvents::POST_SET_DATA, function (FormEvent $event) use($self) {goto jiY1r;G7ycv:return;goto GfD6a;X30uo:$referer = $request->headers->get('referer');goto GpjpW;tFawA:$Order->setCharge($Payment->getCharge());goto diYMg;diYMg:SA55j:goto Lt11Y;RMd3i:xsOKv:goto mgUaY;h1cf8:$uri = $request->getUri();goto oqfrE;DiTx7:$Payments = $this->getPaymentChoices($form);goto mSOg3;oqfrE:if (!(preg_match('/shopping\\/amazon_pay/', $uri) == false)) {goto xsOKv;}goto o0Uw1;GpjpW:$Payment = $Order->getPayment();goto NRziI;AGiE8:Zdnt1:goto h1cf8;Lt11Y:$this->addPaymentForm($form, $Payments, $Order->getPayment());goto RMd3i;mSOg3:$Payments = $this->removeAmazonPayChoice($Payments);goto D5fyH;afY4q:$Order->setPayment($Payment);goto MNoOG;VzuIh:if (!(null === $Order || !$Order->getId())) {goto tDzfA;}goto G7ycv;D5fyH:if (!((is_null($Order->getPayment()) || $Order->getPayment()->getMethodClass() === AmazonPay::class) && ($Payment = current($Payments)))) {goto SA55j;}goto afY4q;NRziI:if (!($Payment && $Payment->getMethodClass() === AmazonPay::class && preg_match('/shopping_coupon/', $referer))) {goto Zdnt1;}goto bwnlp;jiY1r:$Order = $event->getData();goto VzuIh;GfD6a:tDzfA:goto ntXSN;ntXSN:$request = $this->requestStack->getMasterRequest();goto X30uo;o0Uw1:$form = $event->getForm();goto DiTx7;MNoOG:$Order->setPaymentMethod($Payment->getMethod());goto tFawA;bwnlp:return;goto AGiE8;mgUaY:});goto OwAeb;akPth:return;goto dX3R_;PVbcl:if (!$options['skip_add_form']) {goto v7MAx;}goto akPth;OwAeb:$builder->addEventListener(FormEvents::PRE_SUBMIT, function (FormEvent $event) use($self) {goto o7Zzn;Kt1UD:$Order = $form->getData();goto Jk9C6;CqPsG:$Payments = $this->removeAmazonPayChoice($Payments);goto KgD7X;DZU6D:$data = $event->getData();goto jcGCk;BQkNf:$Order->setPayment($Payment);goto TCkIJ;rUE2p:OaxV9:goto gpAbg;Jk9C6:$Payments = $this->getPaymentChoices($form);goto Y0IMT;Nb3c8:$form = $event->getForm();goto Kt1UD;tR06I:$Payments = $this->getPaymentChoices($form);goto CqPsG;JoiJS:$form = $event->getForm();goto WSrst;wKqbP:qEIe5:goto uvhzj;MhIdw:goto ydF7I;goto KaJsD;Ru6dA:$data = $event->getData();goto OFwAP;jcGCk:$data['Payment'] = $Payment->getId();goto ID2K8;uvhzj:$this->addPaymentForm($form, $Payments);goto LPXaE;ZJ5Zg:$uri = $request->getUri();goto DeyxK;OFwAP:foreach ($Payments as $key => $Payment) {goto QVa3u;cjJf3:xlhTj:goto cAHxq;Maf39:$data['Payment'] = $Payment->getId();goto y1GNH;y1GNH:$event->setData($data);goto Juue3;QVa3u:if (!(!isset($data['Payment']) && $Payment->getMethodClass() === AmazonPay::class)) {goto uOeeW;}goto Maf39;Juue3:uOeeW:goto cjJf3;cAHxq:}goto rUE2p;WSrst:$Order = $form->getData();goto tR06I;LPXaE:ydF7I:goto dhDGT;gpAbg:TT66w:goto MhIdw;ID2K8:$event->setData($data);goto wKqbP;KgD7X:if (!((is_null($Order->getPayment()) || $Order->getPayment()->getMethodClass() === AmazonPay::class) && ($Payment = current($Payments)))) {goto qEIe5;}goto BQkNf;o7Zzn:$request = $this->requestStack->getMasterRequest();goto ZJ5Zg;TCkIJ:$Order->setPaymentMethod($Payment->getMethod());goto IJV1X;KaJsD:yrJd1:goto JoiJS;IJV1X:$Order->setCharge($Payment->getCharge());goto DZU6D;DeyxK:if (preg_match('/shopping\\/amazon_pay/', $uri) == false) {goto yrJd1;}goto Nb3c8;Y0IMT:if (!(is_null($Order->getPayment()) || $Order->getPayment()->getMethodClass() === AmazonPay::class)) {goto TT66w;}goto Ru6dA;dhDGT:});goto IfD1p;dX3R_:v7MAx:goto sRjfA;sRjfA:$self = $this;goto PL1rw;IfD1p:}private function getPaymentChoices(FormInterface $form){return $form->get('Payment')->getConfig()->getAttribute('choice_list')->getChoices();}private function removeAmazonPayChoice($Payments){goto eDb4D;eDb4D:foreach ($Payments as $key => $Payment) {goto ZJ5YJ;x1P3z:WgyWw:goto ksvFI;qqswX:unset($Payments[$key]);goto x1P3z;ZJ5YJ:if (!($Payment->getMethodClass() === AmazonPay::class)) {goto WgyWw;}goto qqswX;ksvFI:i4oJ9:goto Vkfma;Vkfma:}goto fiYsj;xhlsY:return $Payments;goto GPs0H;fiYsj:xYjJG:goto xhlsY;GPs0H:}private function addPaymentForm(FormInterface $form, array $choices, Payment $data = null){goto bLn3Z;Eh0SZ:$message = trans('front.shopping.payment_method_not_fount');goto c84BG;G31a3:if (!empty($choices)) {goto mpwx6;}goto Eh0SZ;rRCw3:$form->add('Payment', EntityType::class, ['class' => Payment::class, 'choice_label' => 'method', 'expanded' => true, 'multiple' => false, 'placeholder' => false, 'constraints' => [new NotBlank(['message' => $message])], 'choices' => $choices, 'data' => $data, 'invalid_message' => $message]);goto uVXYb;c84BG:mpwx6:goto rRCw3;bLn3Z:$message = trans('front.shopping.payment_method_unselected');goto G31a3;uVXYb:}public function getExtendedType(){return OrderType::class;}public static function getExtendedTypes() : iterable{return [OrderType::class];}}