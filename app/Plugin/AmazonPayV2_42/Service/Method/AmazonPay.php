<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.3   |
    |              on 2022-12-15 15:50:07              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
namespace Plugin\AmazonPayV2_42\Service\Method;use Plugin\AmazonPayV2_42\Service\AmazonOrderHelper;use Plugin\AmazonPayV2_42\Service\AmazonRequestService;use Eccube\Entity\Master\OrderStatus;use Eccube\Entity\Order;use Eccube\Repository\Master\OrderStatusRepository;use Eccube\Repository\ProductClassRepository;use Eccube\Service\Payment\PaymentMethodInterface;use Eccube\Service\Payment\PaymentResult;use Eccube\Service\PurchaseFlow\PurchaseContext;use Eccube\Service\PurchaseFlow\PurchaseFlow;use Symfony\Component\Form\FormInterface;class AmazonPay implements PaymentMethodInterface{public function __construct(OrderStatusRepository $orderStatusRepository, ProductClassRepository $productClassRepository, PurchaseFlow $shoppingPurchaseFlow, AmazonOrderHelper $amazonOrderHelper, AmazonRequestService $amazonRequestService){goto amHLt;x9epD:$this->purchaseFlow = $shoppingPurchaseFlow;goto i3Hqi;i3Hqi:$this->amazonOrderHelper = $amazonOrderHelper;goto Fa3li;ZdBc4:$this->productClassRepository = $productClassRepository;goto x9epD;Fa3li:$this->amazonRequestService = $amazonRequestService;goto G20hD;amHLt:$this->orderStatusRepository = $orderStatusRepository;goto ZdBc4;G20hD:}public function verify(){return false;}public function apply(){goto gqvo3;kjwH5:return false;goto Vixvz;gqvo3:$this->purchaseFlow->prepare($this->Order, new PurchaseContext());goto LXJU3;niG22:$this->Order->setOrderStatus($OrderStatus);goto kjwH5;LXJU3:$OrderStatus = $this->orderStatusRepository->find(OrderStatus::PENDING);goto niG22;Vixvz:}public function checkout(){goto yLIbD;yLIbD:$response = $this->amazonOrderHelper->completeCheckout($this->Order, $this->amazonCheckoutSessionId);goto TOndP;TOndP:$this->amazonOrderHelper->setAmazonOrder($this->Order, $response->chargePermissionId, $response->chargeId);goto ynrk8;JfYa1:$result->setSuccess(true);goto ujiYW;jen00:$result = new PaymentResult();goto JfYa1;ujiYW:return $result;goto uFwRr;ynrk8:$this->purchaseFlow->commit($this->Order, new PurchaseContext());goto jen00;uFwRr:}public function setFormType(FormInterface $form){}public function setOrder(Order $Order){$this->Order = $Order;}public function setAmazonCheckoutSessionId($amazonCheckoutSessionId){$this->amazonCheckoutSessionId = $amazonCheckoutSessionId;}}