<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.3   |
    |              on 2022-12-15 15:50:07              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
namespace Plugin\AmazonPayV2_42\Service;use Doctrine\ORM\EntityManagerInterface;use Eccube\Common\EccubeConfig;use Eccube\Entity\Master\OrderStatus;use Eccube\Repository\BaseInfoRepository;use Eccube\Repository\CustomerRepository;use Eccube\Repository\Master\OrderStatusRepository;use Eccube\Service\CartService;use Eccube\Service\PurchaseFlow\PurchaseContext;use Eccube\Service\PurchaseFlow\PurchaseFlow;use Eccube\Service\PurchaseFlow\Processor\StockReduceProcessor;use Eccube\Service\PurchaseFlow\Processor\PointProcessor;use Plugin\AmazonPayV2_42\Entity\Master\AmazonStatus;use Plugin\AmazonPayV2_42\Exception\AmazonException;use Plugin\AmazonPayV2_42\Exception\AmazonPaymentException;use Plugin\AmazonPayV2_42\Repository\ConfigRepository;use Plugin\AmazonPayV2_42\Amazon\Pay\API\Client as AmazonPayClient;use Plugin\AmazonPayV2_42\Repository\Master\AmazonStatusRepository;use GuzzleHttp\Client;use Guzzle\Http\Exception\BadResponseException;use Guzzle\Http\Exception\CurlException;use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;use Symfony\Component\DependencyInjection\ContainerInterface;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpFoundation\Session\SessionInterface;use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;use Symfony\Component\Routing\Generator\UrlGeneratorInterface;use Carbon\Carbon;class AmazonRequestService extends AbstractController{protected $entityManager;protected $baseInfoRepository;protected $customerRepository;protected $cartService;protected $purchaseFlow;protected $eccubeConfig;protected $configRepository;protected $Config;protected $amazonApi;protected $amazonApiConfig;protected $session;protected $tokenStorage;protected $container;private $pointProcessor;private $stockReduceProcessor;private $amazonStatusRepository;private $orderStatusRepository;public function __construct(EntityManagerInterface $entityManager, BaseInfoRepository $baseInfoRepository, CustomerRepository $customerRepository, CartService $cartService, PurchaseFlow $cartPurchaseFlow, EccubeConfig $eccubeConfig, ConfigRepository $configRepository, SessionInterface $session, TokenStorageInterface $tokenStorage, OrderStatusRepository $orderStatusRepository, AmazonStatusRepository $amazonStatusRepository, StockReduceProcessor $stockReduceProcessor, PointProcessor $pointProcessor, ContainerInterface $container){goto aOoss;ofKBl:$this->session = $session;goto E8F1f;Bu5zp:goto YBNcS;goto L7JAL;Q5GAg:$this->amazonApiConfig = $this->eccubeConfig['amazon_pay_v2']['api']['config'];goto a6wOl;BEeSr:YBNcS:goto Q5GAg;Tk_gf:$this->BaseInfo = $baseInfoRepository->get();goto RYeM1;jFMIK:$this->amazonStatusRepository = $amazonStatusRepository;goto NJpIT;UOAr_:$this->container = $container;goto eOBcI;tQrsA:$this->purchaseFlow = $cartPurchaseFlow;goto S44o6;Frb83:$this->orderStatusRepository = $orderStatusRepository;goto jFMIK;S44o6:$this->eccubeConfig = $eccubeConfig;goto kCBnL;L7JAL:HIN7J:goto WScuX;aOoss:$this->entityManager = $entityManager;goto Tk_gf;eOBcI:$this->Config = $this->configRepository->get();goto gJxdC;NZVto:$this->cartService = $cartService;goto tQrsA;UGTEA:$this->amazonApi = $this->eccubeConfig['amazon_pay_v2']['api']['sandbox'];goto Bu5zp;RYeM1:$this->customerRepository = $customerRepository;goto NZVto;kCBnL:$this->configRepository = $configRepository;goto ofKBl;E8F1f:$this->tokenStorage = $tokenStorage;goto Frb83;e219k:$this->pointProcessor = $pointProcessor;goto UOAr_;NJpIT:$this->stockReduceProcessor = $stockReduceProcessor;goto e219k;gJxdC:if ($this->Config->getAmazonAccountMode() == $this->eccubeConfig['amazon_pay_v2']['account_mode']['owned'] && $this->Config->getEnv() == $this->eccubeConfig['amazon_pay_v2']['env']['prod']) {goto HIN7J;}goto UGTEA;WScuX:$this->amazonApi = $this->eccubeConfig['amazon_pay_v2']['api']['prod'];goto BEeSr;a6wOl:}private function payoutSellerOrderId($orderId, $request_type = ''){goto Pha7o;DH4tp:puSAT:goto l3r0V;z6YSM:$prefix = '';goto iNc3u;pko11:$prefix = $prefix === '' ? '' : $prefix . '_';goto ilnZT;l3r0V:$timestamp = $timestamp === '' ? '' : $timestamp . '_';goto C128J;GevGu:$timestamp = Carbon::now()->timestamp;goto DH4tp;F0nCd:if (!($this->Config->getAmazonAccountMode() === $this->eccubeConfig['amazon_pay_v2']['account_mode']['shared'])) {goto puSAT;}goto GevGu;Pha7o:$request_attr = $request_type === '' ? '' : strtoupper($request_type) . '_';goto z6YSM;ilnZT:$timestamp = '';goto F0nCd;C128J:return $timestamp . $prefix . $request_attr . $orderId;goto UGhlj;G0JkK:$prefix = $arrInit['prefix'];goto a_ieK;a_ieK:zTis5:goto pko11;q8G5Q:if (!file_exists($iniFile)) {goto zTis5;}goto Sc3CR;iNc3u:$iniFile = dirname(__FILE__) . '/../amazon_pay_config.ini';goto q8G5Q;Sc3CR:$arrInit = parse_ini_file($iniFile);goto G0JkK;UGhlj:}protected function getAmazonPayConfig(){goto yqzMC;LPI7L:return $config;goto UujHO;yqzMC:$Config = $this->configRepository->get();goto IrfM1;IrfM1:$config = ['public_key_id' => $Config->getPublicKeyId(), 'private_key' => $this->eccubeConfig->get('kernel.project_dir') . '/' . $Config->getPrivateKeyPath(), 'sandbox' => $Config->getEnv() == $this->eccubeConfig['amazon_pay_v2']['env']['sandbox'] ? true : false, 'region' => 'jp'];goto LPI7L;UujHO:}public function createCheckoutSessionPayload($cart_key){goto dRTcp;jCEzB:$payload = ['webCheckoutDetails' => ['checkoutReviewReturnUrl' => $router->generate('amazon_checkout_review', ['cart' => $cart_key], UrlGeneratorInterface::ABSOLUTE_URL)], 'paymentDetails' => ['allowOvercharge' => true], 'storeId' => $Config->getClientId(), 'deliverySpecifications' => ['addressRestrictions' => ['type' => 'Allowed', 'restrictions' => ['JP' => []]]]];goto YHqX0;rqizW:$router = $this->container->get('router');goto jCEzB;dRTcp:$Config = $this->configRepository->get();goto rqizW;YHqX0:return json_encode($payload, JSON_FORCE_OBJECT);goto L8qDG;L8qDG:}public function createUpdateCheckoutSessionPayload($Order){goto OF3eS;gFasz:$payload['merchantMetadata']['merchantStoreName'] = $this->BaseInfo->getShopName();goto zewVv;UdpY3:goto izW0r;goto Qcd7i;xbnS3:throw AmazonPaymentException::create(AmazonPaymentException::ZERO_PAYMENT);goto Q6LrQ;kvcNC:$paymentIntent = 'Authorize';goto HYltp;WCfjf:$payload = ['webCheckoutDetails' => ['checkoutResultReturnUrl' => $router->generate('amazon_pay_shopping_checkout_result', [], UrlGeneratorInterface::ABSOLUTE_URL)], 'paymentDetails' => ['paymentIntent' => $paymentIntent, 'canHandlePendingAuthorization' => false, 'chargeAmount' => ['amount' => (int) $Order->getPaymentTotal(), 'currencyCode' => "JPY"]], 'merchantMetadata' => ['merchantReferenceId' => $this->payoutSellerOrderId($Order->getId()), 'noteToBuyer' => ''], "platformId" => "A1LODGGQOBGE66"];goto qLwUq;qLwUq:if (!(mb_strlen($this->BaseInfo->getShopName()) < 51)) {goto SSBU2;}goto gFasz;SuGLW:$paymentIntent = 'AuthorizeWithCapture';goto w0s8S;COv08:$config = $this->configRepository->get();goto EvBMC;XTrds:return json_encode($payload, JSON_FORCE_OBJECT);goto UL57R;Q6LrQ:OqDfk:goto COv08;HYltp:goto izW0r;goto pj_k_;zewVv:SSBU2:goto XTrds;OF3eS:$router = $this->container->get('router');goto C8v0D;w0s8S:izW0r:goto WCfjf;C8v0D:if (!($Order->getPaymentTotal() == 0)) {goto OqDfk;}goto xbnS3;pj_k_:Ap1qe:goto SuGLW;EvBMC:if ($config->getSale() == $this->eccubeConfig['amazon_pay_v2']['sale']['authori']) {goto CnK6t;}goto Ewvek;Ewvek:if ($config->getSale() == $this->eccubeConfig['amazon_pay_v2']['sale']['capture']) {goto Ap1qe;}goto UdpY3;Qcd7i:CnK6t:goto kvcNC;UL57R:}public function createCompleteCheckoutSessionPayload($Order){$payload = ['chargeAmount' => ['amount' => (int) $Order->getPaymentTotal(), 'currencyCode' => 'JPY']];return json_encode($payload, JSON_FORCE_OBJECT);}public function createCaptureChargePayload($Order, $billingAmount = null){$payload = ['captureAmount' => ['amount' => is_null($billingAmount) ? (int) $Order->getPaymentTotal() : $billingAmount, 'currencyCode' => 'JPY']];return json_encode($payload, JSON_FORCE_OBJECT);}public function createCancelChargePayload($cancellationReason = null){$payload = ['cancellationReason' => $cancellationReason];return json_encode($payload, JSON_FORCE_OBJECT);}public function createCloseChargePermissionPayload($closureReason = null, $cancelPendingCharges = null){$payload = ['closureReason' => $closureReason, 'cancelPendingCharges' => $cancelPendingCharges];return json_encode($payload, JSON_FORCE_OBJECT);}public function createCreateRefundPayload($chargeId, $refundAmount){$payload = ['chargeId' => $chargeId, 'refundAmount' => ['amount' => $refundAmount, 'currencyCode' => $this->eccubeConfig['amazon_pay_v2']['api']['payload']['currency_code']]];return json_encode($payload, JSON_FORCE_OBJECT);}public function createCreateChargePayload($chargePermissionId, $paymentTotal, $CaptureNow = false, $canHandlePendingAuthorization = false){$payload = ['chargePermissionId' => $chargePermissionId, 'chargeAmount' => ['amount' => $paymentTotal, 'currencyCode' => $this->eccubeConfig['amazon_pay_v2']['api']['payload']['currency_code']], 'captureNow' => $CaptureNow, 'canHandlePendingAuthorization' => $canHandlePendingAuthorization];return json_encode($payload, JSON_FORCE_OBJECT);}public function updateCheckoutSession($Order, $amazonCheckoutSessionId){goto Zkk4w;Zkk4w:$client = new AmazonPayClient($this->getAmazonPayConfig());goto J4Tqo;J4Tqo:$result = $client->updateCheckoutSession($amazonCheckoutSessionId, $this->createUpdateCheckoutSessionPayload($Order));goto hf_U0;hf_U0:return json_decode($result['response']);goto EVMH_;EVMH_:}public function signaturePayload($payload){goto iTl5Z;iTl5Z:$client = new AmazonPayClient($this->getAmazonPayConfig());goto yMKiC;yMKiC:$signature = $client->generateButtonSignature($payload);goto A3Rod;A3Rod:return $signature;goto eCsh5;eCsh5:}public function getCheckoutSession($amazonCheckoutSessionId){goto pkata;pkata:$client = new AmazonPayClient($this->getAmazonPayConfig());goto NtH2e;BdSVn:return json_decode($result['response']);goto HtdjL;NtH2e:$result = $client->getCheckoutSession($amazonCheckoutSessionId);goto BdSVn;HtdjL:}public function completeCheckoutSession($Order, $amazonCheckoutSessionId){goto H0XOH;sR3mP:$response = json_decode($result['response']);goto vcRkF;DlM5Y:throw new AmazonException();goto CjSgY;L1vPw:$this->cancelOrder($Order);goto CVzGx;qXhCv:throw AmazonPaymentException::create($errorCode);goto UWT6S;jmTXE:if (!$errorCode) {goto Kh7yl;}goto qXhCv;LXcEi:if (!($response->reasonCode == 'CheckoutSessionCanceled')) {goto C8TRi;}goto O_OlB;opEY2:if (isset($response->reasonCode)) {goto ewWuL;}goto jRoEL;xHH_2:ewWuL:goto mNmCf;UqMMy:if (!($response->statusDetails->state == 'Completed')) {goto UIz0R;}goto GeWvj;CVzGx:logs('amazon_pay_v2')->info('▼completeCheckoutSession 受注をキャンセルしました' . 'order_id = ' . $Order->getId());goto jmTXE;oLXB4:$errorCode = AmazonPaymentException::getErrorCode($checkoutSession->statusDetails->reasonCode);goto naY1w;I3zNp:goto JUkLN;goto xHH_2;naY1w:logs('amazon_pay_v2')->info('▼completeCheckoutSession statusDetails = ' . var_export($checkoutSession->statusDetails, true));goto L1vPw;UWT6S:Kh7yl:goto smuFD;jRoEL:goto JUkLN;goto xVvg2;IAdvB:C8TRi:goto FEWuT;Pv0IR:$result = $client->completeCheckoutSession($amazonCheckoutSessionId, $this->createCompleteCheckoutSessionPayload($Order));goto sR3mP;vcRkF:logs('amazon_pay_v2')->info('▼completeCheckoutSession http-status = ' . $result['status'] . ', order_id = ' . $Order->getId());goto mfZ_L;GeWvj:return $response;goto xiRx2;O_OlB:$checkoutSession = $this->getCheckoutSession($amazonCheckoutSessionId);goto VP3qR;xVvg2:Wx5dI:goto UqMMy;mNmCf:logs('amazon_pay_v2')->info('▼completeCheckoutSession reasonCode = ' . $response->reasonCode . ', order_id = ' . $Order->getId());goto LXcEi;xiRx2:UIz0R:goto I3zNp;VP3qR:if (!($checkoutSession && isset($checkoutSession->statusDetails->reasonCode))) {goto tdLj8;}goto oLXB4;mfZ_L:if ($result['status'] == 200 || $result['status'] == 202) {goto Wx5dI;}goto opEY2;smuFD:tdLj8:goto IAdvB;FEWuT:JUkLN:goto DlM5Y;H0XOH:$client = new AmazonPayClient($this->getAmazonPayConfig());goto Pv0IR;CjSgY:}private function cancelOrder($Order){goto JzZcw;fq2Vh:$this->entityManager->flush();goto NtWuC;oMbU3:$AmazonStatus = $this->amazonStatusRepository->find(AmazonStatus::CANCEL);goto QHSIy;QHSIy:$Order->setAmazonPayV2AmazonStatus($AmazonStatus);goto fq2Vh;JzZcw:$OrderStatus = $this->orderStatusRepository->find($this->orderStatusRepository->find(OrderStatus::CANCEL));goto ss87I;ss87I:$Order->setOrderStatus($OrderStatus);goto oMbU3;NtWuC:}public function captureCharge($chargeId, $Order, $billingAmount = null){goto fOlyJ;QDtsU:$result = $client->captureCharge($chargeId, $this->createCaptureChargePayload($Order, $billingAmount), $headers);goto BS7Tu;fOlyJ:$client = new AmazonPayClient($this->getAmazonPayConfig());goto E3g96;BS7Tu:return json_decode($result['response']);goto hlYWo;E3g96:$headers = ['x-amz-pay-Idempotency-Key' => uniqid()];goto QDtsU;hlYWo:}public function cancelCharge($chargeId, $cancellationReason = null){goto dh9sn;dh9sn:$payload = $this->createCancelChargePayload($cancellationReason);goto VJSAo;TRm2g:$result = $client->cancelCharge($chargeId, $payload);goto DzHyL;DzHyL:return json_decode($result['response']);goto jYhe5;VJSAo:$client = new AmazonPayClient($this->getAmazonPayConfig());goto TRm2g;jYhe5:}public function closeChargePermission($chargePermissionId, $closureReason = null, $cancelPendingCharges = true){goto hvGgs;qspip:$client = new AmazonPayClient($this->getAmazonPayConfig());goto cpQwd;cpQwd:$result = $client->closeChargePermission($chargePermissionId, $payload);goto PeDbD;hvGgs:$payload = $this->createCloseChargePermissionPayload($closureReason, $cancelPendingCharges);goto qspip;PeDbD:return json_decode($result['response']);goto Mc_od;Mc_od:}public function createRefund($chargeId, $refundAmount, $softDescriptor = null, $idempotencyKey = null){goto ZXr1o;hzjz_:$idempotencyKey = uniqid();goto IT9t6;hjM90:$client = new AmazonPayClient($this->getAmazonPayConfig());goto WZlJn;ZXr1o:$payload = $this->createCreateRefundPayload($chargeId, $refundAmount);goto gzh9g;ma0Fa:return json_decode($result['response']);goto nzp1a;sApdk:$payload = array_merge($payload, ["softDescriptor" => $softDescriptor]);goto uq7xP;EqjNF:if (!($idempotencyKey == null)) {goto q_SQ9;}goto hzjz_;WZlJn:$result = $client->createRefund($payload, $headers);goto ma0Fa;gzh9g:if (!(null != $softDescriptor)) {goto VtS_e;}goto sApdk;t2ZV1:$headers = ['x-amz-pay-Idempotency-Key' => $idempotencyKey];goto hjM90;IT9t6:q_SQ9:goto t2ZV1;uq7xP:VtS_e:goto EqjNF;nzp1a:}public function createCharge($chargePermissionId, $paymentTotal, $CaptureNow = false, $softDescriptor = null, $canHandlePendingAuthorization = false, $merchantMetadataMerchantReferenceId = null, $idempotencyKey = null){goto hR11m;if28O:$client = new AmazonPayClient($this->getAmazonPayConfig());goto yK6vA;Q4Dt2:return json_decode($result['response']);goto Qks2X;xdzNo:$payload = array_merge($payload, ["merchantMetadata" => ["merchantReferenceId" => $merchantMetadataMerchantReferenceId]]);goto C6H0C;yK6vA:$result = $client->createCharge($payload, $headers);goto Q4Dt2;SnQ9q:if (!($idempotencyKey == null)) {goto J3_fo;}goto iGPKT;iGPKT:$idempotencyKey = uniqid();goto ZvfXs;gbUtJ:$headers = ['x-amz-pay-Idempotency-Key' => $idempotencyKey];goto if28O;hR11m:$payload = $this->createCreateChargePayload($chargePermissionId, $paymentTotal, $CaptureNow, $canHandlePendingAuthorization);goto NMq0f;C6H0C:GCFaK:goto f_xN_;mhzie:NUG7H:goto SnQ9q;f_xN_:if (!(null != $softDescriptor)) {goto NUG7H;}goto GnTTf;ZvfXs:J3_fo:goto gbUtJ;GnTTf:$payload = array_merge($payload, ["softDescriptor" => $softDescriptor]);goto mhzie;NMq0f:if (!(null != $merchantMetadataMerchantReferenceId)) {goto GCFaK;}goto xdzNo;Qks2X:}public function getCharge($chargeId){goto PlzTV;PlzTV:$client = new AmazonPayClient($this->getAmazonPayConfig());goto HQFeM;HQFeM:$result = $client->getCharge($chargeId);goto AKvDp;AKvDp:return json_decode($result['response']);goto LIstd;LIstd:}public function createSigninPayload($returnUrl){goto uhrtc;gyx3I:$payload = ['signInReturnUrl' => $returnUrl, 'storeId' => $Config->getClientId()];goto vIzOI;vIzOI:return json_encode($payload, JSON_FORCE_OBJECT);goto WAUgQ;uhrtc:$Config = $this->configRepository->get();goto gyx3I;WAUgQ:}public function getBuyer($buyerToken, $headers = null){goto Gz9T8;ul6Xa:if (!($result['status'] != 200)) {goto GTi4k;}goto JFTyQ;JFTyQ:throw new AmazonException();goto pPZiP;JfvIS:$result = $client->getBuyer($buyerToken, $headers);goto ul6Xa;OJedh:return json_decode($result['response']);goto t94Ev;pPZiP:GTi4k:goto OJedh;Gz9T8:$client = new AmazonPayClient($this->getAmazonPayConfig());goto JfvIS;t94Ev:}public function loginWithBuyerId(Request $request, $buyerId){goto W1R7s;RsKOJ:return true;goto lMPcg;Nr8Xl:if (!(empty($Customers[0]) || !$Customers[0] instanceof \Eccube\Entity\Customer)) {goto fkewN;}goto QCyRe;ydGXm:$token = new UsernamePasswordToken($Customers[0], null, 'customer', ['ROLE_USER']);goto G2km0;oiTyc:$request->getSession()->migrate(true);goto ph6wz;W1R7s:$Customers = $this->customerRepository->getNonWithdrawingCustomers(['v2_amazon_user_id' => $buyerId]);goto Nr8Xl;G2km0:$this->tokenStorage->setToken($token);goto oiTyc;r0Mk7:foreach ($this->cartService->getCarts() as $Cart) {$this->purchaseFlow->validate($Cart, new PurchaseContext($Cart, $Customers[0]));B0zke:}goto UFpxf;ph6wz:$this->cartService->mergeFromPersistedCart();goto r0Mk7;UFpxf:qs4uF:goto oknOU;oknOU:$this->cartService->save();goto RsKOJ;V9Wzz:fkewN:goto ydGXm;QCyRe:return false;goto V9Wzz;lMPcg:}}