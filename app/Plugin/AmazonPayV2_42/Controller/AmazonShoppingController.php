<?php
/*   __________________________________________________
    |  Obfuscated by YAK Pro - Php Obfuscator  2.0.3   |
    |              on 2022-12-15 15:50:07              |
    |    GitHub: https://github.com/pk-fr/yakpro-po    |
    |__________________________________________________|
*/
namespace Plugin\AmazonPayV2_42\Controller;use Eccube\Entity\Delivery;use Eccube\Entity\OrderItem;use Eccube\Repository\DeliveryRepository;use Eccube\Repository\Master\OrderStatusRepository;use Eccube\Repository\OrderRepository;use Eccube\Repository\TradeLawRepository;use Plugin\AmazonPayV2_42\Repository\ConfigRepository;use Plugin\AmazonPayV2_42\Service\AmazonOrderHelper;use Plugin\AmazonPayV2_42\Service\AmazonRequestService;use Plugin\AmazonPayV2_42\Service\Method\AmazonPay;use Eccube\Common\EccubeConfig;use Eccube\Controller\AbstractShoppingController;use Eccube\Entity\Order;use Eccube\Entity\Shipping;use Eccube\Entity\Master\OrderStatus;use Eccube\Form\Type\Shopping\OrderType;use Eccube\Repository\CustomerRepository;use Eccube\Repository\Master\PrefRepository;use Eccube\Repository\ProductClassRepository;use Eccube\Repository\PluginRepository;use Eccube\Service\CartService;use Eccube\Service\MailService;use Eccube\Service\OrderHelper;use Eccube\Service\PurchaseFlow\PurchaseContext;use Eccube\Service\PurchaseFlow\PurchaseFlow;use Eccube\Service\PurchaseFlow\Processor\AddPointProcessor;use Eccube\Service\PurchaseFlow\Processor\CustomerPurchaseInfoProcessor;use Plugin\AmazonPayV2_42\Exception\AmazonPaymentException;use Plugin\AmazonPayV2_42\Amazon\Pay\API\Client;use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;use Symfony\Component\DependencyInjection\ContainerInterface;use Symfony\Component\Routing\Annotation\Route;use Symfony\Component\Form\FormInterface;use Symfony\Component\Form\FormError;use Symfony\Component\HttpFoundation\Request;use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;use Symfony\Component\HttpFoundation\RedirectResponse;use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;use Symfony\Component\Security\Core\Encoder\EncoderFactoryInterface;use Symfony\Component\Routing\Generator\UrlGeneratorInterface;use Symfony\Component\Routing\RouterInterface;use Symfony\Component\Validator\Validator\ValidatorInterface;use Symfony\Component\Validator\Constraints as Assert;use Doctrine\DBAL\LockMode;class AmazonShoppingController extends AbstractShoppingController{private $sessionAmazonProfileKey = 'amazon_pay_v2.profile';private $sessionAmazonCheckoutSessionIdKey = 'amazon_pay_v2.checkout_session_id';private $sessionAmazonCustomerParamKey = 'amazon_pay_v2.customer_regist_v2';private $sessionAmazonCustomerErrorKey = 'amazon_pay_v2.customer_regist_v2_error';private $sessionIsShippingRefresh = 'amazon_pay_v2.is_shipping_refresh';protected $validator;protected $cartService;protected $amazonOrderHelper;protected $addPointProcessor;protected $customerPurchaseInfoProcessor;protected $serviceContainer;protected TradeLawRepository $tradeLawRepository;public function __construct(EccubeConfig $eccubeConfig, PurchaseFlow $cartPurchaseFlow, CartService $cartService, MailService $mailService, OrderHelper $orderHelper, CustomerRepository $customerRepository, OrderRepository $orderRepository, OrderStatusRepository $orderStatusRepository, PrefRepository $prefRepository, ProductClassRepository $productClassRepository, PluginRepository $pluginRepository, ConfigRepository $configRepository, AmazonOrderHelper $amazonOrderHelper, AmazonRequestService $amazonRequestService, ValidatorInterface $validator, EncoderFactoryInterface $encoderFactory, TokenStorageInterface $tokenStorage, DeliveryRepository $deliveryRepository, AddPointProcessor $addPointProcessor, CustomerPurchaseInfoProcessor $customerPurchaseInfoProcessor, TradeLawRepository $tradeLawRepository, ContainerInterface $serviceContainer){goto IqfDa;xWLIG:$this->tradeLawRepository = $tradeLawRepository;goto TyxKh;HKWKi:$this->pluginRepository = $pluginRepository;goto I4X1w;VCfrK:$this->purchaseFlow = $cartPurchaseFlow;goto NLuDP;I4X1w:$this->Config = $configRepository->get();goto KjP4c;GypF7:$this->mailService = $mailService;goto q1o1Y;TyxKh:$this->serviceContainer = $serviceContainer;goto MryDA;ipBbk:$this->customerRepository = $customerRepository;goto YzHnU;EIEiO:$this->encoderFactory = $encoderFactory;goto B4oU3;iteKJ:$this->validator = $validator;goto EIEiO;W19gn:$this->orderStatusRepository = $orderStatusRepository;goto a9g9A;a9g9A:$this->prefRepository = $prefRepository;goto Dn9XQ;RGAPt:$this->customerPurchaseInfoProcessor = $customerPurchaseInfoProcessor;goto xWLIG;IqfDa:$this->eccubeConfig = $eccubeConfig;goto VCfrK;q1o1Y:$this->orderHelper = $orderHelper;goto ipBbk;NLuDP:$this->cartService = $cartService;goto GypF7;qoOXU:$this->amazonRequestService = $amazonRequestService;goto iteKJ;zu1LC:$this->deliveryRepository = $deliveryRepository;goto xyoUZ;xyoUZ:$this->addPointProcessor = $addPointProcessor;goto RGAPt;YzHnU:$this->orderRepository = $orderRepository;goto W19gn;Dn9XQ:$this->productClassRepository = $productClassRepository;goto HKWKi;B4oU3:$this->tokenStorage = $tokenStorage;goto zu1LC;KjP4c:$this->amazonOrderHelper = $amazonOrderHelper;goto qoOXU;MryDA:}    /**
     * @Route("/shopping/amazon_pay", name="amazon_pay_shopping")
     * @Template("Shopping/index.twig")
     *
     * @param Request $request
     */
public function index(Request $request, PurchaseFlow $cartPurchaseFlow){goto uYufv;BiPM2:if ($Cart && $this->orderHelper->verifyCart($Cart)) {goto dOFEQ;}goto imlMR;RZq7R:$Order = $this->amazonOrderHelper->initializeAmazonOrder($Order, $Customer);goto GDGwr;HblM7:LnnN5:goto Za5pZ;f6WTi:$Cart->setPreOrderId(null);goto UJCOv;VUDyM:$form = $this->createForm(OrderType::class, $Order);goto Xa4Bl;wb2Zk:$Order = $this->orderHelper->initializeOrder($Cart, $Customer);goto WjyBh;npXbt:logs('amazon_pay_v2')->info('[注文手続] 集計処理を開始します.', [$Order->getId()]);goto wVcsj;Q9CMP:$cartPurchaseFlow->validate($Cart, new PurchaseContext());goto bnbIv;PE8hM:logs('amazon_pay_v2')->info('[注文手続] Warningが発生しました.', [$flowResult->getWarning()]);goto Q9CMP;iXaGX:nwkM7:goto Wi6_t;bnbIv:$this->cartService->save();goto I7PWR;x6EZV:MBfur:goto oH8UF;DrNKx:if (!($checkoutSession && $checkoutSession->statusDetails->state !== 'Open')) {goto lXPbn;}goto tO8OX;o7vBb:$this->entityManager->flush();goto cq1gO;hIBW2:logs('amazon_pay_v2')->info('[注文手続] 受注の初期化処理を開始します.');goto VSQXy;cyQp3:$checkoutSession = $this->amazonRequestService->getCheckoutSession($amazonCheckoutSessionId);goto DrNKx;O0fI2:$this->session->set(OrderHelper::SESSION_NON_MEMBER, $Customer);goto qxwMB;imlMR:logs('amazon_pay_v2')->info('[注文手続] カートが購入フローへ遷移できない状態のため, カート画面に遷移します.');goto mcISV;wVcsj:$flowResult = $this->executePurchaseFlow($Order, false);goto dLSQl;Gu7hI:$this->entityManager->flush();goto rsYPQ;Za5pZ:$activeTradeLaws = $this->tradeLawRepository->findBy(['displayOrderScreen' => true], ['sortNo' => 'ASC']);goto Tnr6M;Y0dev:mxjKV:goto qd6Er;Xx6j3:$arrAmazonCustomerParam['mail_magazine'] = false;goto iXaGX;CG36K:$this->session->set($this->sessionAmazonCustomerErrorKey, null);goto HblM7;i6Djr:VVO59:goto gzsB2;UouKh:if (!$flowResult->hasError()) {goto mxjKV;}goto qp_PA;ggx41:if ($amazonCustomerParam = $this->session->get($this->sessionAmazonCustomerParamKey)) {goto MBfur;}goto FDZzJ;FqeUL:AAru6:goto Ntf_v;WjyBh:$Shipping = $Order->getShippings()->first();goto KdggI;GlpSO:return $this->redirectToRoute('shopping_error');goto Y0dev;mcISV:return $this->redirectToRoute('cart');goto Sracd;Nq2Kk:lXPbn:goto hIBW2;dia2s:$this->amazonOrderHelper->convert($Shippings->first(), $checkoutSession->shippingAddress);goto OdCO0;bp3Z0:AOacA:goto jRBkF;Z9WvQ:$Shipping->setShippingDeliveryName($AmazonDefaultDelivery->getName());goto o7vBb;ufid9:$arrAmazonCustomerParam['customer_regist_v2'] = false;goto FqeUL;e5md7:$Cart = $this->cartService->getCart();goto BiPM2;Xa4Bl:if ($this->isGranted('IS_AUTHENTICATED_FULLY')) {goto AOacA;}goto tklH7;jRBkF:if (!($amazonCustomerError = $this->session->get($this->sessionAmazonCustomerErrorKey))) {goto LnnN5;}goto pmsPZ;GYmvr:$initOrderFlg = false;goto QOAkf;L8Snd:foreach ($arrAmazonCustomerError as $key => $val) {$form[$key]->addError(new FormError($val));cmG6G:}goto Fom20;UJCOv:sIm8l:goto neDUe;Wi6_t:WFyTK:goto VUDyM;rsYPQ:$this->session->remove($this->sessionIsShippingRefresh);goto wAmIQ;SS3Jj:goto MwKni;goto Qm_fA;OdCO0:$Shippings->first()->setCompanyName('');goto Gu7hI;nRKW3:$initOrderFlg = true;goto SS3Jj;ekuLe:return $this->redirectToRoute('shopping_error');goto Nq2Kk;I7PWR:U3M7p:goto ggx41;UvFxj:$this->session->remove($this->sessionAmazonCheckoutSessionIdKey);goto ekuLe;qd6Er:if (!$flowResult->hasWarning()) {goto U3M7p;}goto PE8hM;VSQXy:$Customer = $this->getUser() ? $this->getUser() : $this->amazonOrderHelper->getOrderer($checkoutSession->shippingAddress);goto sVFZr;S_4Rx:$this->addError('Amazon Payでご利用できる配送方法が存在しません。');goto i6Djr;QbIxX:$Shipping->setDelivery($AmazonDefaultDelivery);goto Z9WvQ;gzsB2:if (!($initOrderFlg && $AmazonDefaultDelivery)) {goto tvYie;}goto QbIxX;QOAkf:if ($Order = $this->orderHelper->getPurchaseProcessingOrder($Cart->getPreOrderId())) {goto Q50OJ;}goto nRKW3;neDUe:MwKni:goto wb2Zk;Pep1Y:logs('amazon_pay_v2')->info('AmazonShopping::index end.');goto M54wO;Sracd:dOFEQ:goto T7HqZ;qxwMB:QfeLt:goto GYmvr;KdggI:$AmazonDefaultDelivery = $this->getAmazonPayDefaultDelivery($Shipping);goto UC6N3;Tnr6M:$form->handleRequest($request);goto Pep1Y;yJiBB:goto WFyTK;goto x6EZV;uYufv:logs('amazon_pay_v2')->info('AmazonShopping::index start.');goto e5md7;GDGwr:if (!$this->session->get($this->sessionIsShippingRefresh)) {goto ssJNU;}goto hzcsT;pmsPZ:$arrAmazonCustomerError = unserialize($amazonCustomerError);goto L8Snd;Fom20:GhWqA:goto CG36K;wAmIQ:ssJNU:goto npXbt;T7HqZ:$amazonCheckoutSessionId = $this->session->get($this->sessionAmazonCheckoutSessionIdKey);goto cyQp3;tklH7:$this->setAmazonCustomerData($form, $arrAmazonCustomerParam);goto bp3Z0;FDZzJ:$arrAmazonCustomerParam = ['customer_regist_v2' => true, 'mail_magazine' => true, 'login_check_v2' => 'regist', 'amazon_login_email_v2' => null, 'amazon_login_password_v2' => null];goto yJiBB;VCA4g:if (!empty($arrAmazonCustomerParam['customer_regist_v2'])) {goto AAru6;}goto ufid9;Qm_fA:Q50OJ:goto NdEXD;dLSQl:$this->entityManager->flush();goto UouKh;tO8OX:logs('amazon_pay_v2')->info('[注文手続] CheckoutSessionがOpenで無い為決済処理を中断します.', ['CheckoutSessionId => $amazonCheckoutSessionId']);goto UvFxj;oH8UF:$arrAmazonCustomerParam = unserialize($amazonCustomerParam);goto VCA4g;NdEXD:if (!$Order->isMultiple()) {goto sIm8l;}goto f6WTi;Ntf_v:if (!empty($arrAmazonCustomerParam['mail_magazine'])) {goto nwkM7;}goto Xx6j3;qp_PA:logs('amazon_pay_v2')->info('[注文手続] Errorが発生したため購入エラー画面へ遷移します.', [$flowResult->getErrors()]);goto GlpSO;hzcsT:$Shippings = $Order->getShippings();goto dia2s;M54wO:return ['form' => $form->createView(), 'Order' => $Order, 'AmazonCustomer' => $arrAmazonCustomerParam, 'AmazonPaymentDescriptor' => $checkoutSession->paymentPreferences[0]->paymentDescriptor, 'AmazonShippingAddress' => $checkoutSession->shippingAddress, 'activeTradeLaws' => $activeTradeLaws];goto wWL36;UC6N3:if (!($AmazonDefaultDelivery === false)) {goto VVO59;}goto S_4Rx;cq1gO:tvYie:goto RZq7R;sVFZr:if ($this->isGranted('ROLE_USER')) {goto QfeLt;}goto O0fI2;wWL36:}    /**
     * ご注文内容のご確認
     *
     * @Route("/shopping/amazon_pay/confirm", name="amazon_pay_shopping_confirm", methods={"POST"})
     * @Template("Shopping/confirm.twig")
     */
public function confirm(Request $request){goto WzVSS;q7BS5:m0M2E:goto qGai7;dIeYE:if ($PaymentResult->isSuccess()) {goto dWx9R;}goto ECWYC;rfkbo:if ($Order) {goto SNRD8;}goto GWoYt;mdK94:return $this->redirectToRoute('cart');goto ajgx6;EA7dT:$preOrderId = $this->cartService->getPreOrderId();goto hUeL2;SmHz1:$form = $this->createForm(OrderType::class, $Order);goto tvPay;ECWYC:$this->entityManager->rollback();goto HXetl;CcghH:$this->entityManager->flush();goto zzpOr;mtctD:$form->handleRequest($request);goto JAc2U;MJ9Ad:logs('amazon_pay_v2')->info('[注文確認] 集計処理を開始します.', [$Order->getId()]);goto ocNOO;tvPay:if ($this->isGranted('IS_AUTHENTICATED_FULLY')) {goto Xs0_7;}goto ckIF6;qGai7:logs('amazon_pay_v2')->info('[注文確認] PaymentMethod::verifyを実行します.', [$Order->getPayment()->getMethodClass()]);goto wdwPM;JyjmJ:return $this->redirectToRoute('shopping_error');goto upH2s;ra85w:$arrAmazonCustomerParam = $this->getAmazonCustomerParam($request);goto OdogU;OdogU:$this->session->set($this->sessionAmazonCustomerParamKey, serialize($arrAmazonCustomerParam));goto SmHz1;hUeL2:$Order = $this->orderHelper->getPurchaseProcessingOrder($preOrderId);goto rfkbo;cvGyP:if (!$response) {goto m0M2E;}goto j_Hfc;upH2s:SNRD8:goto ra85w;ajgx6:nBQv4:goto EA7dT;ocNOO:$response = $this->executePurchaseFlow($Order);goto r0yZo;kp9w4:$this->entityManager->flush();goto sYOH8;WCJT0:return $response;goto ZGsMw;zzpOr:$activeTradeLaws = $this->tradeLawRepository->findBy(['displayOrderScreen' => true], ['sortNo' => 'ASC']);goto Xf9QZ;r0yZo:$this->entityManager->flush();goto cvGyP;j_Hfc:return $this->redirectToRoute('amazon_pay_shopping');goto q7BS5;HXetl:foreach ($PaymentResult->getErrors() as $error) {$this->addError($error);S97g5:}goto cokyF;WzVSS:logs('amazon_pay_v2')->info('AmazonShopping::confirm start.');goto ntGE_;Vz9_x:logs('amazon_pay_v2')->info('[注文確認] PaymentMethod::verifyのエラーのため, 注文手続き画面へ遷移します.', [$PaymentResult->getErrors()]);goto FRXz_;WiR_t:if (!($form->isSubmitted() && $form->isValid())) {goto jlAyt;}goto MJ9Ad;ntGE_:$Cart = $this->cartService->getCart();goto B5i2O;Lxz7l:return $this->redirectToRoute('amazon_pay_shopping');goto AhVGA;UWkWy:if (!$PaymentResult) {goto KersR;}goto dIeYE;m1AMr:logs('amazon_pay_v2')->info('[注文確認] フォームエラーのため, 注文手続画面へ遷移します', [$Order->getId()]);goto Dw4WY;GWoYt:logs('amazon_pay_v2')->info('[リダイレクト] 購入処理中の受注が存在しません.');goto JyjmJ;V02de:if (!($response && ($response->isRedirection() || $response->getContent()))) {goto crobl;}goto kp9w4;DHfX5:$PaymentResult = $paymentMethod->verify();goto UWkWy;bdjQ_:dWx9R:goto gcZkh;Xf9QZ:logs('amazon_pay_v2')->info('[注文確認] 注文確認画面を表示します.');goto MmxY4;sYOH8:logs('amazon_pay_v2')->info('[注文確認] PaymentMethod::verifyが指定したレスポンスを表示します.');goto WCJT0;MB_Oa:$this->session->set($this->sessionAmazonCustomerErrorKey, serialize($arrAmazonCustomerError));goto Lxz7l;JAc2U:if (!($arrAmazonCustomerError = $this->checkAmazonCustomerError($request, $form, $Order))) {goto ho5CB;}goto MB_Oa;FRXz_:return $this->redirectToRoute('amazon_pay_shopping');goto bdjQ_;B5i2O:if ($Cart && $this->orderHelper->verifyCart($Cart)) {goto nBQv4;}goto f_8Pg;wdwPM:$paymentMethod = $this->createPaymentMethod($Order, $form);goto DHfX5;ckIF6:$this->setAmazonCustomerData($form, $arrAmazonCustomerParam);goto SIRG2;cokyF:hK61U:goto Vz9_x;MmxY4:return ['form' => $form->createView(), 'Order' => $Order, 'activeTradeLaws' => $activeTradeLaws];goto gXxDP;AhVGA:ho5CB:goto WiR_t;SIRG2:Xs0_7:goto mtctD;ZGsMw:crobl:goto QbpjJ;f_8Pg:logs('amazon_pay_v2')->info('[注文手続] カートが購入フローへ遷移できない状態のため, カート画面に遷移します.');goto mdK94;gXxDP:jlAyt:goto m1AMr;gcZkh:$response = $PaymentResult->getResponse();goto V02de;Dw4WY:return $this->redirectToRoute('amazon_pay_shopping', ['request' => $request], 307);goto Y7Yqo;QbpjJ:KersR:goto CcghH;Y7Yqo:}    /**
     * 購入処理
     *
     * @Route("/shopping/amazon_pay/checkout", name="amazon_pay_shopping_checkout", methods={"POST"})
     * @Template("Shopping/index.twig")
     */
public function checkout(Request $request){goto SDavx;CTIb3:$Cart = $this->cartService->getCart();goto nEowp;yySup:Ifd_0:goto aATMk;uU6il:return $this->redirectToRoute('shopping_error');goto aPseU;KavMK:logs('amazon_pay_v2')->info('[注文処理] PaymentMethod::applyを実行します.');goto Ztq28;iH98k:$amazonCheckoutSessionId = $this->session->get($this->sessionAmazonCheckoutSessionIdKey);goto DjozP;rIdls:return $this->redirectToRoute('shopping_error');goto vCh4W;jkh7L:return $this->redirectToRoute('amazon_pay_shopping');goto ol8cM;OPPpo:logs('amazon_pay_v2')->info('[リダイレクト] 購入処理中の受注が存在しません.');goto ndi9I;HsD7P:b3sx7:goto y2AT1;tzE52:$this->entityManager->flush();goto a6IKV;ndi9I:return $this->redirectToRoute('shopping_error');goto ykOih;ykOih:F_VWs:goto iH98k;by6FR:$Order = $this->orderHelper->getPurchaseProcessingOrder($preOrderId);goto AsvIJ;aG6CD:$arrAmazonCustomerParam = unserialize($amazonCustomerParam);goto QrwkE;ck2fA:if (!isset($checkoutSession->reasonCode)) {goto KBnx2;}goto RvAny;rU01l:eJXjI:goto FfHWV;zlSvY:$this->setAmazonCustomerData($form, $arrAmazonCustomerParam);goto DwuJp;aATMk:EBWdm:goto YbfeC;wMlrY:return $response;goto HsD7P;JMXQb:logs('amazon_pay_v2')->info('購入処理開始', [$Order->getId()]);goto vFWoE;LSZeJ:$arrAmazonCustomerParam = $this->getAmazonCustomerParam($request);goto ZrGlA;mMtCq:return $this->redirectToRoute('cart');goto rU01l;or3ru:return $this->redirectToRoute('amazon_pay_shopping');goto TkWPN;DwuJp:x2PTK:goto I4kAu;l2FRk:$this->addError($errMessage);goto bpgVi;RvAny:logs('amazon_pay_v2')->error('reasonCode: ' . $checkoutSession->reasonCode . ' message: ' . $checkoutSession->message);goto IyVUT;QrwkE:$form = $this->createForm(OrderType::class, $Order, ['skip_add_form' => true]);goto alwed;DjozP:$checkoutSession = $this->amazonRequestService->getCheckoutSession($amazonCheckoutSessionId);goto SBC03;ka_NW:$Order->setAmazonPayV2SessionTemp(serialize($session_temp));goto tIjWK;TkWPN:KBnx2:goto JMXQb;tIjWK:$this->entityManager->flush();goto FCHDB;sx9j1:logs('amazon_pay_v2')->info('[注文手続] カートが購入フローへ遷移できない状態のため, カート画面に遷移します.');goto mMtCq;Qvo4E:logs('amazon_pay_v2')->info('[注文手続] CheckoutSessionがOpenで無い為決済処理を中断します.', ['CheckoutSessionId => $amazonCheckoutSessionId']);goto IbLKb;IbLKb:$this->session->remove($this->sessionAmazonCheckoutSessionIdKey);goto uU6il;VJKNw:if (!($arrAmazonCustomerError = $this->checkAmazonCustomerError($request, $form, $Order))) {goto W4a6K;}goto Mw0Gb;SDavx:logs('amazon_pay_v2')->info('AmazonShopping::order start.');goto CTIb3;fegsn:rNnAX:goto XV0jf;OAJZ6:$paymentMethod = $this->createPaymentMethod($Order, $form);goto KavMK;ETEBD:logs('amazon_pay_v2')->error('orderId: ' . $Order->getId() . ' message: ' . $errMessage);goto l2FRk;QNO6E:WwBbC:goto LSZeJ;fvUTs:goto EBWdm;goto yySup;vzvOC:JIpiN:goto OAJZ6;o0Ufy:if ($this->Config->getUseConfirmPage() == $this->eccubeConfig['amazon_pay_v2']['toggle']['off']) {goto WwBbC;}goto PHhMh;bARsd:if (!$shippingDifference) {goto nYqMo;}goto Ts3VZ;vCh4W:UqXzq:goto q32RL;r4BcP:$this->addError('amazon_pay_v2.front.shopping.undefined_pref_error');goto HMa4p;x882S:return $this->redirectToRoute('amazon_pay_shopping');goto WDmBH;I4kAu:$form->handleRequest($request);goto oH83t;Ts3VZ:$this->session->set($this->sessionIsShippingRefresh, true);goto x882S;cNFJS:$form = $this->createForm(OrderType::class, $Order);goto fegsn;aPseU:R5F9d:goto o0Ufy;wi9Bb:if ($this->amazonOrderHelper->checkShippingPref($checkoutSession->shippingAddress)) {goto UqXzq;}goto r4BcP;eqmf3:L6zhC:goto ZtdF7;ZrGlA:$this->session->set($this->sessionAmazonCustomerParamKey, serialize($arrAmazonCustomerParam));goto cNFJS;AsvIJ:if ($Order) {goto F_VWs;}goto OPPpo;y2AT1:$session_temp = ['IS_AUTHENTICATED_FULLY' => $this->isGranted('IS_AUTHENTICATED_FULLY'), $this->sessionAmazonCheckoutSessionIdKey => $amazonCheckoutSessionId, $this->sessionAmazonProfileKey => unserialize($this->session->get($this->sessionAmazonProfileKey)), $this->sessionAmazonCustomerParamKey => unserialize($this->session->get($this->sessionAmazonCustomerParamKey))];goto ka_NW;alwed:goto rNnAX;goto QNO6E;Ztq28:if (!($response = $paymentMethod->apply())) {goto b3sx7;}goto wMlrY;FfHWV:$preOrderId = $this->cartService->getPreOrderId();goto by6FR;YbfeC:if (!($form->isSubmitted() && $form->isValid())) {goto L6zhC;}goto G8KFG;G8KFG:if (!($Order->getPaymentTotal() == 0)) {goto dJzS4;}goto OQWu5;WDmBH:nYqMo:goto wi9Bb;q32RL:if (!($checkoutSession && $checkoutSession->statusDetails->state !== 'Open')) {goto R5F9d;}goto Qvo4E;Beza1:return $this->redirectToRoute('amazon_pay_shopping');goto vzvOC;HMa4p:logs('amazon_pay_v2')->error('[注文手続] 都道府県割当エラー', [$Order->getId()]);goto rIdls;XV0jf:if ($this->isGranted('IS_AUTHENTICATED_FULLY')) {goto x2PTK;}goto zlSvY;ALVIs:dJzS4:goto Poi3F;oH83t:if ($this->Config->getUseConfirmPage() == $this->eccubeConfig['amazon_pay_v2']['toggle']['on']) {goto Ifd_0;}goto VJKNw;SBC03:$shippingDifference = $this->checkShippingDifference($Order, $checkoutSession->shippingAddress);goto bARsd;PHhMh:$amazonCustomerParam = $this->session->get($this->sessionAmazonCustomerParamKey);goto aG6CD;nEowp:if ($Cart && $this->orderHelper->verifyCart($Cart)) {goto eJXjI;}goto sx9j1;FCHDB:return new RedirectResponse($checkoutSession->webCheckoutDetails->amazonPayRedirectUrl);goto eqmf3;Jny3i:return $this->redirectToRoute('amazon_pay_shopping', ['request' => $request], 307);goto aiCll;ZtdF7:logs('amazon_pay_v2')->info('購入チェックエラー', [$Order->getId()]);goto Jny3i;vFWoE:$response = $this->executePurchaseFlow($Order);goto tzE52;bpgVi:return $this->redirectToRoute('amazon_pay_shopping');goto ALVIs;a6IKV:if (!$response) {goto JIpiN;}goto Beza1;IyVUT:$this->addError('予期しないエラーが発生しました。');goto or3ru;Mw0Gb:$this->session->set($this->sessionAmazonCustomerErrorKey, serialize($arrAmazonCustomerError));goto jkh7L;ol8cM:W4a6K:goto fvUTs;Poi3F:$checkoutSession = $this->amazonRequestService->updateCheckoutSession($Order, $amazonCheckoutSessionId);goto ck2fA;OQWu5:$errMessage = AmazonPaymentException::$errorMessages[AmazonPaymentException::ZERO_PAYMENT];goto ETEBD;aiCll:}    /**
     * 結果受取
     *
     * @Route("/shopping/amazon_pay/checkout_result", name="amazon_pay_shopping_checkout_result")
     */
public function checkoutResult(Request $request){goto p1OAK;in3PP:$result = $this->abortCheckoutResult($Order);goto vOhUb;VrGjO:$this->session->set($this->sessionAmazonCustomerParamKey, null);goto F13Zh;AZZSp:logs('amazon_pay_v2')->info('[注文処理] IPNにより注文処理完了済.', [$Order->getId()]);goto in3PP;Ozb1U:logs('amazon_pay_v2')->info('[注文処理] 注文処理が完了しました. 購入完了画面へ遷移します.', [$Order->getId()]);goto WE0l3;DRRDL:logs('amazon_pay_v2')->info('AmazonShopping::complete_order end.');goto Vy7oJ;F13Zh:$this->session->set($this->sessionAmazonCustomerErrorKey, null);goto Ozb1U;Vy7oJ:$this->session->set(OrderHelper::SESSION_ORDER_ID, $Order->getId());goto nyz3h;y2yQI:$this->cartService->clear();goto CLqio;vOhUb:$this->entityManager->flush();goto unxEl;Q1OWE:$Order = $this->orderRepository->findOneBy(['pre_order_id' => $preOrderId]);goto hpram;j9xkB:$arrAmazonCustomerParam = unserialize($amazonCustomerParam);goto qN1b2;v3um4:$amazonCustomerParam = $this->session->get($this->sessionAmazonCustomerParamKey);goto j9xkB;b02mV:$this->entityManager->flush();goto bgh1d;S1BMo:lRhsj:goto QPOlI;Bqg0n:logs('amazon_pay_v2')->info('[リダイレクト] 決済処理中の受注が存在しません.');goto WMUEa;a5vVc:V5o5K:goto AZZSp;MGy8v:goto gt0k1;goto a5vVc;bgh1d:logs('amazon_pay_v2')->info('[注文処理] カートをクリアします.', [$Order->getId()]);goto y2yQI;unxEl:return $result;goto ii8Tz;czF7I:$this->mailService->sendOrderMail($Order);goto b02mV;nyz3h:logs('amazon_pay_v2')->info('[注文処理] 注文メールの送信を行います.', [$Order->getId()]);goto aEfxP;p1OAK:$preOrderId = $this->cartService->getPreOrderId();goto Q1OWE;sKW2A:H2ZqQ:goto Bqg0n;TxHSo:logs('amazon_pay_v2')->info('[リダイレクト] 受注が存在しません.');goto Gdclt;Gdclt:return $this->redirectToRoute('shopping_error');goto S1BMo;qN1b2:try {goto C2o2Z;ZmHPk:            $mail_message = <<<__EOS__
************************************************
　会員登録情報
************************************************
マイページURL：{$url}
ログインメールアドレス：{$mail}
初期パスワード：{$password}

__EOS__;
goto tG2vR;I1xaY:$this->entityManager->commit();goto hijcK;ohZqk:logs('amazon_pay_v2')->info('[注文処理] 受注情報に更新がありました。処理を中断します。');goto UyVaA;Q8fj9:$this->entityManager->commit();goto A11Sj;djvsJ:vkfcQ:goto d6fIL;RqKf3:UXr9A:goto LV8TF;WD0_J:if ($this->isGranted('IS_AUTHENTICATED_FULLY')) {goto w4zh6;}goto TqvLz;hijcK:logs('amazon_pay_v2')->info('[注文処理] 注文処理が完了しました.', [$Order->getId()]);goto F9LDC;F9LDC:logs('amazon_pay_v2')->info('購入処理完了', [$Order->getId()]);goto llWW_;YTxSB:goto lNoWb;goto RqKf3;yq9yx:$Customer = $this->getUser();goto HPXIz;qIWbo:$profile = unserialize($this->session->get($this->sessionAmazonProfileKey));goto WD0_J;YI_VO:if (!($arrAmazonCustomerParam['login_check_v2'] == 'login')) {goto HzdR5;}goto us5Bb;TUSmj:if (!$arrAmazonCustomerParam['customer_regist_v2']) {goto ScEgu;}goto Jwam4;Aw8dE:logs('amazon_pay_v2')->info('$Order[update_date] is ' . $Order['update_date']->format('Y-m-d H:i:s.u') . ', $LockedOrder[update_date] is ' . $LockedOrder['update_date']->format('Y-m-d H:i:s.u'));goto Bev0d;X9spL:$Order->setCustomer($Customer);goto X_Xzz;g1vIy:$LockedOrder = $this->orderRepository->find($Order['id'], LockMode::PESSIMISTIC_WRITE);goto Aw8dE;Scsj2:if (!($response = $this->executeCheckout($paymentMethod, $Order))) {goto InxHJ;}goto dcBA4;C2o2Z:logs('amazon_pay_v2')->info('決済完了レスポンス受取', [$Order->getId()]);goto Fv3dv;wM7JO:nPN5K:goto TUSmj;tG2vR:goto e_01w;goto djvsJ;JVAhG:$this->entityManager->flush();goto Q8fj9;cGpIP:e_01w:goto F7PTj;lW07V:$mail = $dtbCustomer[0]->getEmail();goto YTxSB;kdvlx:$amazonDtbCustomer = $this->customerRepository->getNonWithdrawingCustomers(['v2_amazon_user_id' => $profile->buyerId]);goto yVGpR;us5Bb:if (!$this->setLogin($request, $Order, $arrAmazonCustomerParam['amazon_login_email_v2'])) {goto mqPWL;}goto YSQ7v;WrHvi:goto jih08;goto wM7JO;f7GPU:ScEgu:goto TXsDd;aMglR:InxHJ:goto qIWbo;N93k5:$dtbCustomer = $this->customerRepository->getNonWithdrawingCustomers(['email' => $Order->getEmail()]);goto kdvlx;PnYyy:$paymentMethod = $this->createPaymentMethod($Order, $form, $amazonCheckoutSessionId);goto WgU0Q;pke19:swPbF:goto FVp78;bOLIX:LwfpF:goto Q2ZDU;o9bxt:$Customer = $this->getUser();goto X9spL;TN9Ag:lNoWb:goto AZP8F;WgU0Q:$this->entityManager->beginTransaction();goto g1vIy;X_Xzz:$this->customerPurchaseInfoProcessor->commit($Order, new PurchaseContext());goto C7Hu1;Q2ZDU:mqPWL:goto NP8_Q;LV8TF:$mail = $amazonDtbCustomer[0]->getEmail();goto TN9Ag;otY_m:$Customer->setV2AmazonUserId($profile->buyerId);goto bOLIX;m0fnJ:$Customers = $this->customerRepository->getNonWithdrawingCustomers(['v2_amazon_user_id' => $profile->buyerId]);goto VQ7S4;gFLsT:goto oFI7j;goto mBnrI;mBnrI:w4zh6:goto yq9yx;qqEYU:oFI7j:goto nhO0G;dEnp3:$Customer->setV2AmazonUserId($profile->buyerId);goto kjLsE;NP8_Q:HzdR5:goto WrHvi;Jwam4:$url = $this->generateUrl('mypage_login', [], UrlGeneratorInterface::ABSOLUTE_URL);goto N93k5;VQ7S4:if (!(!$Customer->getV2AmazonUserId() && empty($Customers[0]))) {goto LwfpF;}goto otY_m;y0YtV:$this->entityManager->flush();goto I1xaY;A8svv:$password = $this->amazonOrderHelper->registCustomer($Order, $arrAmazonCustomerParam['mail_magazine']);goto o9bxt;Bev0d:if (!($Order['update_date'] != $LockedOrder['update_date'])) {goto swPbF;}goto ohZqk;FVp78:logs('amazon_pay_v2')->info('[注文処理] PaymentMethod::checkoutを実行します.');goto Scsj2;UyVaA:$result = $this->abortCheckoutResult($Order);goto JVAhG;F7PTj:$Order->setCompleteMailMessage($mail_message);goto f7GPU;nhO0G:logs('amazon_pay_v2')->info('AddPointProcessorを実行します.', [$Order->getId()]);goto JeUbm;C7Hu1:$mail = $Customer->getEmail();goto ZmHPk;HPXIz:$Customers = $this->customerRepository->getNonWithdrawingCustomers(['v2_amazon_user_id' => $profile->buyerId]);goto iAmSl;Fv3dv:$form = $this->createForm(OrderType::class, $Order);goto PnYyy;TXsDd:jih08:goto gFLsT;kjLsE:ms6Hq:goto qqEYU;YSQ7v:$Customer = $Order->getCustomer();goto m0fnJ;iAmSl:if (!(!$Customer->getV2AmazonUserId() && empty($Customers[0]))) {goto ms6Hq;}goto dEnp3;TqvLz:if (empty($arrAmazonCustomerParam['login_check_v2']) || $arrAmazonCustomerParam['login_check_v2'] == 'regist') {goto nPN5K;}goto YI_VO;d6fIL:if ($amazonDtbCustomer) {goto UXr9A;}goto lW07V;AZP8F:            $mail_message = <<<__EOS__
************************************************
　会員登録情報
************************************************
マイページURL：{$url}
※会員登録済みです。メールアドレスは{$mail}です。

__EOS__;
goto cGpIP;dcBA4:return $response;goto aMglR;JeUbm:$this->addPointProcessor->validate($Order, new PurchaseContext());goto y0YtV;A11Sj:return $result;goto pke19;yVGpR:if ($dtbCustomer || $amazonDtbCustomer) {goto vkfcQ;}goto A8svv;llWW_:} catch (ShoppingException $e) {goto P6rRN;P6rRN:$this->addError($e->getMessage());goto gVOeb;MVw0C:$this->entityManager->flush();goto PJ1pM;C8oj1:$this->purchaseFlow->rollback($Order, new PurchaseContext());goto MVw0C;PJ1pM:$this->entityManager->commit();goto Bdu0p;Bdu0p:return $this->redirectToRoute('shopping_error');goto YJNm3;gVOeb:logs('amazon_pay_v2')->error('購入エラー', [$e->getMessage()]);goto C8oj1;YJNm3:} catch (AmazonPaymentException $e) {goto ZzqgP;Y2Jul:$this->entityManager->flush();goto fsEc2;wNLaJ:$this->purchaseFlow->rollback($Order, new PurchaseContext());goto Y2Jul;fsEc2:$this->entityManager->commit();goto P8vm_;ZzqgP:$this->addError($e->getMessage());goto gydXr;P8vm_:return $this->redirectToRoute('shopping_error');goto xoKsY;gydXr:logs('amazon_pay_v2')->error($e->getMessage(), [$Order->getId()]);goto wNLaJ;xoKsY:} catch (\Exception $e) {goto EkmhX;EkmhX:$this->addError('front.shopping.system_error');goto XD0ta;e30PW:$this->entityManager->flush();goto rCp5f;rCp5f:$this->entityManager->commit();goto FWV02;BZWNj:$this->purchaseFlow->rollback($Order, new PurchaseContext());goto e30PW;FWV02:return $this->redirectToRoute('shopping_error');goto MaMhv;XD0ta:logs('amazon_pay_v2')->error('予期しないエラー', [get_class($e), $e->getMessage()]);goto BZWNj;MaMhv:}goto DRRDL;CLqio:$Order->setAmazonPayV2SessionTemp(null);goto iFL48;dOpEb:obYWj:goto czF7I;iFL48:$this->entityManager->flush();goto y7a_k;UanbH:if ($Order->getOrderStatus() != $this->orderStatusRepository->find(OrderStatus::PENDING)) {goto H2ZqQ;}goto MGy8v;Aq7Jw:gt0k1:goto WFB0h;WFB0h:$amazonCheckoutSessionId = $request->get('amazonCheckoutSessionId');goto v3um4;ii8Tz:goto gt0k1;goto sKW2A;lKHsM:$Order->appendCompleteMailMessage("特記事項：" . $this->Config->getMailNotices());goto dOpEb;hpram:if ($Order) {goto lRhsj;}goto TxHSo;y7a_k:$this->session->set($this->sessionAmazonCheckoutSessionIdKey, null);goto VrGjO;WMUEa:return $this->redirectToRoute('shopping_error');goto Aq7Jw;WE0l3:return $this->redirectToRoute('shopping_complete');goto l8O5C;QPOlI:if ($Order->getOrderStatus() == $this->orderStatusRepository->find(OrderStatus::NEW)) {goto V5o5K;}goto UanbH;aEfxP:if (is_null($this->Config->getMailNotices())) {goto obYWj;}goto lKHsM;l8O5C:}function abortCheckoutResult($Order){goto gH7QR;n12yU:$this->session->set($this->sessionAmazonCustomerErrorKey, null);goto NyC5m;Fk8IS:return $this->redirectToRoute('shopping_complete');goto OozqW;nTH7r:$this->session->set($this->sessionAmazonCheckoutSessionIdKey, null);goto LC3sU;LC3sU:$this->session->set($this->sessionAmazonCustomerParamKey, null);goto n12yU;NyC5m:logs('amazon_pay_v2')->info('[注文処理] 購入完了画面へ遷移します.', [$Order->getId()]);goto Fk8IS;gH7QR:$this->session->set(OrderHelper::SESSION_ORDER_ID, $Order->getId());goto OzA2E;OzA2E:logs('amazon_pay_v2')->info('[注文処理] カートをクリアします.', [$Order->getId()]);goto pCnvD;pCnvD:$this->cartService->clear();goto FsxO3;FsxO3:$Order->setAmazonPayV2SessionTemp(null);goto nTH7r;OozqW:}    /**
     * 購入確認画面から, 他の画面へのリダイレクト.
     * 配送業者や支払方法、お問い合わせ情報をDBに保持してから遷移する.
     *
     * @Route("/shopping/amazon_pay/redirect_to", name="amazon_pay_shopping_redirect_to", methods={"POST"})
     * @Template("Shopping/index.twig")
     */
public function redirectTo(Request $request, RouterInterface $router){goto DAfrk;s66iW:return $this->redirectToRoute('shopping_error');goto la7GZ;iwhzK:if (!empty($redirectTo)) {goto E8f_Z;}goto lDAKM;vEE0d:if (!($form->isSubmitted() && $form->isValid())) {goto WBG3H;}goto kWo1F;vDuaS:ZN3ho:goto F88oJ;c9Vns:$flowResult = $this->executePurchaseFlow($Order, false);goto hAI3c;zhpjZ:WBG3H:goto z_P0u;mSB9a:ljZg_:goto lIOpW;lIOpW:$redirectTo = $form['redirect_to']->getData();goto iwhzK;WjA7u:return $this->redirectToRoute('shopping_error');goto vDuaS;obV1L:logs('amazon_pay_v2')->info('Warningが発生したため注文手続き画面へ遷移します.', [$flowResult->getWarning()]);goto R_01K;O7HV3:return $this->redirectToRoute('amazon_pay_shopping');goto pojsM;pojsM:E8f_Z:goto tSMMF;qUmBe:$Order = $this->orderHelper->getPurchaseProcessingOrder($preOrderId);goto xeY96;z_P0u:logs('amazon_pay_v2')->info('[リダイレクト] フォームエラーのため, 注文手続き画面を表示します.', [$Order->getId()]);goto z5S71;kWo1F:logs('amazon_pay_v2')->info('[リダイレクト] 集計処理を開始します.', [$Order->getId()]);goto c9Vns;z5S71:return $this->redirectToRoute('amazon_pay_shopping', ['request' => $request], 307);goto BOwQJ;xeY96:if ($Order) {goto ZN3ho;}goto eecJo;hAI3c:$this->entityManager->flush();goto cE9yu;jx5e7:if (!$flowResult->hasWarning()) {goto ljZg_;}goto obV1L;cE9yu:if (!$flowResult->hasError()) {goto S0ldd;}goto TGbzY;tSMMF:try {goto ITWGL;tMHBS:return $this->forwardToRoute($result['_route']);goto pMlsp;ITWGL:$pattern = '/^' . preg_quote($request->getBasePath(), '/') . '/';goto OCS__;OCS__:$redirectTo = preg_replace($pattern, '', $redirectTo);goto OJFvN;OJFvN:$result = $router->match($redirectTo);goto tMHBS;pMlsp:} catch (\Exception $e) {logs('amazon_pay_v2')->info('[リダイレクト] URLの形式が不正です', [$redirectTo, $e->getMessage()]);return $this->redirectToRoute('shopping_error');}goto zhpjZ;eecJo:logs('amazon_pay_v2')->info('[リダイレクト] 購入処理中の受注が存在しません.');goto WjA7u;DAfrk:$preOrderId = $this->cartService->getPreOrderId();goto qUmBe;R_01K:return $this->redirectToRoute('amazon_pay_shopping');goto mSB9a;TGbzY:logs('amazon_pay_v2')->info('Errorが発生したため購入エラー画面へ遷移します.', [$flowResult->getErrors()]);goto s66iW;la7GZ:S0ldd:goto jx5e7;lDAKM:logs('amazon_pay_v2')->info('[リダイレクト] リダイレクト先未指定のため注文手続き画面へ遷移します.');goto O7HV3;zeh4Z:$form->handleRequest($request);goto vEE0d;F88oJ:$form = $this->createForm(OrderType::class, $Order);goto zeh4Z;BOwQJ:}    /**
     * API通信によって配送業者や支払方法、お問い合わせ情報をDBに保存する.
     *
     * @Route("/shopping/amazon_pay/order_save", name="amazon_pay_shopping_order_save", methods={"POST", "GET"})
     */
public function orderSave(Request $request){goto UFkKz;ZDlAl:$this->entityManager->flush();goto TmT4C;HntsB:if (!($form->isSubmitted() && $form->isValid())) {goto wzHJE;}goto E_7sH;zesXX:BySIG:goto pPFnL;eqUT8:logs('amazon_pay_v2')->info('フォームエラーが発生しました.');goto eNVdX;E_7sH:logs('amazon_pay_v2')->info('集計処理を開始します.', [$Order->getId()]);goto ydV0G;C1VPu:throw new BadRequestHttpException();goto fkedT;mAsjc:logs('amazon_pay_v2')->info('executePurchaseFlowでWarningが発生しました.', [$flowResult->getWarning()]);goto oWfwJ;WZTfw:wzHJE:goto eqUT8;VKOeg:$form = $this->createForm(OrderType::class, $Order);goto Hupe3;yhD64:logs('amazon_pay_v2')->info('購入処理中の受注が存在しません.');goto sslog;ydV0G:$flowResult = $this->executePurchaseFlow($Order, false);goto ZDlAl;ttE9Z:$Order = $this->orderHelper->getPurchaseProcessingOrder($preOrderId);goto Ipwka;UFkKz:if ($request->isXmlHttpRequest()) {goto HNFNI;}goto C1VPu;fkedT:HNFNI:goto XqUvu;Hupe3:$form->handleRequest($request);goto JYUlq;XqUvu:$preOrderId = $this->cartService->getPreOrderId();goto ttE9Z;zukBw:logs('amazon_pay_v2')->info('executePurchaseFlowでErrorが発生しました.', [$flowResult->getErrors()]);goto IhUZT;zcesF:xPR0r:goto k2sXc;GDH1u:mYCyv:goto VKOeg;eNVdX:return $this->json(['error' => 'validateError'], 500);goto bpTm0;TmT4C:if (!$flowResult->hasError()) {goto xPR0r;}goto zukBw;oWfwJ:return $this->json(['error' => 'executePurchaseFlow::Warning'], 500);goto zesXX;sslog:return $this->json(['error' => 'OrderNotFound'], 500);goto GDH1u;k2sXc:if (!$flowResult->hasWarning()) {goto BySIG;}goto mAsjc;IhUZT:return $this->json(['error' => 'executePurchaseFlow::Error'], 500);goto zcesF;S8D11:$this->session->set($this->sessionAmazonCustomerParamKey, serialize($arrAmazonCustomerParam));goto HntsB;Ipwka:if ($Order) {goto mYCyv;}goto yhD64;JYUlq:$arrAmazonCustomerParam = $this->getAmazonCustomerParam($request);goto S8D11;pPFnL:return $this->json([]);goto WZTfw;bpTm0:}private function createPaymentMethod(Order $Order, FormInterface $form, $amazonCheckoutSessionId = null){goto PTpWY;WfDe7:$PaymentMethod->setFormType($form);goto x3II6;ObQNf:$PaymentMethod->setAmazonCheckoutSessionId($amazonCheckoutSessionId);goto Ft9UJ;iueun:$PaymentMethod->setOrder($Order);goto WfDe7;Ft9UJ:gjy0K:goto Nqupy;PTpWY:$PaymentMethod = $this->serviceContainer->get($Order->getPayment()->getMethodClass());goto iueun;x3II6:if (is_null($amazonCheckoutSessionId)) {goto gjy0K;}goto ObQNf;Nqupy:return $PaymentMethod;goto Q28ec;Q28ec:}protected function executeCheckout(AmazonPay $paymentMethod, Order $Order){goto NG1H_;r3B_A:logs('amazon_pay_v2')->info('[注文処理] PaymentMethod::checkoutが指定したレスポンスを表示します.');goto lyIkw;tHUgu:if (!($response && ($response->isRedirection() || $response->getContent()))) {goto qEwzg;}goto KWb5L;lyIkw:return $response;goto L90ty;xmq7j:EtwA5:goto ZlRZY;QT0H4:return $this->redirectToRoute('shopping_error');goto aVmud;NG1H_:$PaymentResult = $paymentMethod->checkout();goto KCxOm;ZlRZY:logs('amazon_pay_v2')->info('[注文処理] PaymentMethod::checkoutのエラーのため, 購入エラー画面へ遷移します.', [$PaymentResult->getErrors()]);goto QT0H4;TU76u:foreach ($PaymentResult->getErrors() as $error) {$this->addError($error);Pk7RZ:}goto xmq7j;L90ty:qEwzg:goto BIzb3;KCxOm:$response = $PaymentResult->getResponse();goto tHUgu;BIzb3:if ($PaymentResult->isSuccess()) {goto IH6eG;}goto b9sE2;b9sE2:$this->purchaseFlow->rollback($Order, new PurchaseContext());goto TU76u;aVmud:IH6eG:goto QryvF;KWb5L:$this->entityManager->flush();goto r3B_A;QryvF:}private function getAmazonCustomerParam($request){goto UOAZ1;kF0bq:$mail_magazine = empty($request->get('_shopping_order')['mail_magazine']) ? false : true;goto RtaJW;e9u70:$amazon_login_password_v2 = empty($request->get('_shopping_order')['amazon_login_password_v2']) ? null : $request->get('_shopping_order')['amazon_login_password_v2'];goto tOTTj;RtaJW:$login_check_v2 = empty($request->get('_shopping_order')['login_check_v2']) ? null : $request->get('_shopping_order')['login_check_v2'];goto MOLfk;UOAZ1:$customer_regist_v2 = empty($request->get('_shopping_order')['customer_regist_v2']) ? false : true;goto kF0bq;MOLfk:$amazon_login_email_v2 = empty($request->get('_shopping_order')['amazon_login_email_v2']) ? null : $request->get('_shopping_order')['amazon_login_email_v2'];goto e9u70;tOTTj:return ['customer_regist_v2' => $customer_regist_v2, 'mail_magazine' => $mail_magazine, 'login_check_v2' => $login_check_v2, 'amazon_login_email_v2' => $amazon_login_email_v2, 'amazon_login_password_v2' => $amazon_login_password_v2];goto xJEjQ;xJEjQ:}private function checkAmazonCustomerError($request, $form, $Order){goto eQQxf;BnrUI:foreach ($violations as $violation) {$amazon_login_password_v2_error .= $violation->getMessage() . PHP_EOL;NaKWd:}goto mNXId;TYjjL:iQo0Z:goto CSDtY;wn4U_:$arrError['customer_regist_v2'] = '※ 会員登録が選択されていません。';goto TYjjL;Mw9vm:D1DyC:goto UNCJC;veFXw:foreach ($violations as $violation) {$amazon_login_email_v2_error .= $violation->getMessage() . PHP_EOL;k9jfR:}goto KS6cl;Jg4Ts:$salt = $Customer[0]->getSalt();goto fcjRm;xtUAQ:if (empty($Customer[0])) {goto lz87L;}goto qSF3U;KS6cl:XBcIL:goto fuQVX;qW3Wc:bU2fe:goto W1m7n;A1MrS:vb7K0:goto uCB6R;UNCJC:if (empty($form['customer_regist_v2']->getData())) {goto OGg23;}goto VxXkR;vhzj0:$violations = $this->validator->validate($form['amazon_login_password_v2']->getData(), [new Assert\NotBlank()]);goto zWx6o;VfnGt:OGg23:goto wn4U_;IjxOt:if (!($login_check_v2 == 'login')) {goto KM1Tz;}goto itAjl;N2knK:Kj3VP:goto SC1FS;D7bna:if (!empty($Customer[0])) {goto Kj3VP;}goto vko54;bdaIQ:$request_uri = $request->getUri();goto XgSbT;itAjl:$violations = $this->validator->validate($form['amazon_login_email_v2']->getData(), [new Assert\NotBlank(), new Assert\Email()]);goto uw1jx;dclos:$arrError['amazon_login_email_v2'] = '※ メールアドレスまたはパスワードが正しくありません。';goto o1QQ_;fuQVX:if (empty($amazon_login_email_v2_error)) {goto RPBym;}goto t9jvh;SC1FS:$arrError['customer_regist_v2'] = '※ 会員登録済みです。メールアドレスは' . $Order->getEmail() . 'です。';goto qW3Wc;uCB6R:l04Y3:goto dxgfx;o1QQ_:TpmhA:goto nHdjk;CSDtY:bfpZY:goto A1MrS;r0ieq:$arrError['amazon_login_email_v2'] = '※ メールアドレスまたはパスワードが正しくありません。';goto cmBf5;GBz3J:$arrError['amazon_login_password_v2'] = '※ パスワードが' . $amazon_login_password_v2_error;goto RbBIh;kqNTY:lz87L:goto dclos;Xzg76:e7uun:goto zTcT9;pM4VX:$login_check_v2 = $form['login_check_v2']->getData();goto dZEnM;RbBIh:b_IeI:goto prg__;VxXkR:$Customer = $this->customerRepository->getNonWithdrawingCustomers(['email' => $Order->getEmail()]);goto sJQaI;zTcT9:goto bU2fe;goto N2knK;eQQxf:$arrError = [];goto sE1Zr;bsYWD:goto TpmhA;goto kqNTY;cmBf5:PLYHW:goto bsYWD;vko54:if (empty($AmazonCustomer[0])) {goto e7uun;}goto k24GN;JwNLw:$AmazonCustomer = $this->customerRepository->getNonWithdrawingCustomers(['v2_amazon_user_id' => $profile->buyerId]);goto D7bna;mNXId:TA1It:goto rbaeF;rbaeF:if (empty($amazon_login_password_v2_error)) {goto b_IeI;}goto GBz3J;prg__:if (!(empty($login_check_v2_error) && empty($amazon_login_email_v2_error) && empty($amazon_login_password_v2_error))) {goto nLgWC;}goto k1ieh;sJQaI:$profile = unserialize($this->session->get($this->sessionAmazonProfileKey));goto JwNLw;XgSbT:if (!('POST' === $request->getMethod() && strpos($request_uri, 'shopping/amazon_pay/address') === false && strpos($request_uri, 'shopping/amazon_pay/delivery') === false)) {goto vb7K0;}goto pM4VX;uw1jx:$amazon_login_email_v2_error = '';goto veFXw;uB27H:if ($encoder->isPasswordValid($customerPassword, $form['amazon_login_password_v2']->getData(), $salt)) {goto PLYHW;}goto r0ieq;dxgfx:return $arrError;goto fS8YN;sE1Zr:if (!(!$this->isGranted('IS_AUTHENTICATED_FULLY') && $this->Config->getLoginRequired() == $this->eccubeConfig['amazon_pay_v2']['toggle']['on'])) {goto l04Y3;}goto bdaIQ;fcjRm:$customerPassword = $Customer[0]->getPassword();goto uB27H;W1m7n:goto iQo0Z;goto VfnGt;nHdjk:nLgWC:goto fzd2M;k24GN:$arrError['customer_regist_v2'] = '※ このAmazonアカウントで既に会員登録済みです。メールアドレスは' . $AmazonCustomer[0]->getEmail() . 'です。';goto Xzg76;qSF3U:$encoder = $this->encoderFactory->getEncoder($Customer[0]);goto Jg4Ts;l1Xvx:RPBym:goto vhzj0;zWx6o:$amazon_login_password_v2_error = '';goto BnrUI;Smeu4:goto bfpZY;goto Mw9vm;fzd2M:KM1Tz:goto Smeu4;dZEnM:if ($login_check_v2 == 'regist') {goto D1DyC;}goto IjxOt;k1ieh:$Customer = $this->customerRepository->getNonWithdrawingCustomers(['email' => $form['amazon_login_email_v2']->getData()]);goto xtUAQ;t9jvh:$arrError['amazon_login_email_v2'] = '※ メールアドレスが' . $amazon_login_email_v2_error;goto l1Xvx;fS8YN:}private function setLogin($request, $Order, $email){goto lF3V6;UKpf7:return $ret;goto Ov6Uu;lF3V6:$ret = false;goto t3lhV;t3lhV:try {goto HmHkc;HmHkc:$Customer = $this->customerRepository->getNonWithdrawingCustomers(['email' => $email]);goto ujKMC;d6qFI:$this->tokenStorage->setToken($token);goto AVWzY;hRDRD:$token = new UsernamePasswordToken($Customer[0], null, 'customer', ['ROLE_USER']);goto d6qFI;ujKMC:$Order->setCustomer($Customer[0]);goto hRDRD;AVWzY:$this->amazonOrderHelper->copyToOrderFromCustomer($Order, $Customer[0]);goto u95hw;u95hw:$ret = true;goto nTyqt;nTyqt:} catch (\Exception $e) {logs('amazon_pay_v2')->error($e);}goto UKpf7;Ov6Uu:}private function setAmazonCustomerData($form, $arrAmazonCustomerParam){goto I1rcM;gOxyu:lvtpD:goto bPO6n;I1rcM:$form->get('customer_regist_v2')->setData($arrAmazonCustomerParam['customer_regist_v2']);goto fZGqC;KTcjJ:if (!($this->Config->getLoginRequired() == $this->eccubeConfig['amazon_pay_v2']['toggle']['on'] && !$this->isGranted('IS_AUTHENTICATED_FULLY'))) {goto lvtpD;}goto FBSEA;DePov:$form->get('amazon_login_email_v2')->setData($arrAmazonCustomerParam['amazon_login_email_v2']);goto O9bVf;O9bVf:$form->get('amazon_login_password_v2')->setData($arrAmazonCustomerParam['amazon_login_password_v2']);goto gOxyu;jBEK8:sGyIl:goto KTcjJ;EYVqw:$form->get('mail_magazine')->setData($arrAmazonCustomerParam['mail_magazine']);goto jBEK8;FBSEA:$form->get('login_check_v2')->setData($arrAmazonCustomerParam['login_check_v2']);goto DePov;fZGqC:if (!($this->pluginRepository->findOneBy(['code' => 'MailMagazine42', 'enabled' => true]) || $this->pluginRepository->findOneBy(['code' => 'PostCarrier42', 'enabled' => true]))) {goto sGyIl;}goto EYVqw;bPO6n:}public function getPendingProcessingOrder($preOrderId = null){goto dw1dn;Hm3Et:$OrderStatus = $this->orderStatusRepository->find(OrderStatus::PENDING);goto bwo8N;nGLBH:d_pNJ:goto Hm3Et;GuTHF:return null;goto nGLBH;dw1dn:if (!(null === $preOrderId)) {goto d_pNJ;}goto GuTHF;bwo8N:return $this->orderRepository->findOneBy(['pre_order_id' => $preOrderId, 'OrderStatus' => $OrderStatus]);goto N21oz;N21oz:}private function checkShippingDifference($Order, $shippingAddress){goto dD4eH;lIlbH:$shippingDifference = false;goto cejaJ;S3ZIs:$amazonShipping->setOrder($Order);goto v_4Wv;v_4Wv:$this->amazonOrderHelper->convert($amazonShipping, $shippingAddress);goto X6_8M;X6_8M:$Shippings = $Order->getShippings();goto lIlbH;NwT1H:return $shippingDifference;goto QTEzJ;weOcF:$shippingDifference = true;goto jlYpR;cejaJ:if (!($Shippings->first()->getPostalCode() !== $amazonShipping->getPostalCode() || $Shippings->first()->getName01() !== $amazonShipping->getName01() || $Shippings->first()->getName02() !== $amazonShipping->getName02() || $Shippings->first()->getKana01() !== $amazonShipping->getKana01() || $Shippings->first()->getKana02() !== $amazonShipping->getKana02() || $Shippings->first()->getPref() !== $amazonShipping->getPref() || $Shippings->first()->getAddr01() !== $amazonShipping->getAddr01() || $Shippings->first()->getAddr02() !== $amazonShipping->getAddr02())) {goto sJAwu;}goto weOcF;jlYpR:sJAwu:goto NwT1H;dD4eH:$amazonShipping = new Shipping();goto S3ZIs;QTEzJ:}protected function getAmazonPayDefaultDelivery(Shipping $Shipping){goto ZKLkf;nL7k_:foreach ($Deliveries as $key => $Delivery) {goto sH2i_;R9Vim:if ($amazonPayFlg) {goto mMXw7;}goto cSAGG;irf39:XcD90:goto Zfgll;xhqjM:mMXw7:goto irf39;Vn8Xz:foreach ($PaymentOptions as $PaymentOption) {goto bh8KZ;M39LK:tuEK1:goto n9Wqm;bh8KZ:$Payment = $PaymentOption->getPayment();goto gpGgv;n9Wqm:hj0xT:goto OzZGz;zag4d:$amazonPayFlg = true;goto R0qRb;R0qRb:goto mORuo;goto M39LK;gpGgv:if (!($Payment->getMethodClass() === AmazonPay::class)) {goto tuEK1;}goto zag4d;OzZGz:}goto MUuDB;sH2i_:$PaymentOptions = $Delivery->getPaymentOptions();goto Lzna0;Lzna0:$amazonPayFlg = false;goto Vn8Xz;cSAGG:unset($Deliveries[$key]);goto xhqjM;MUuDB:mORuo:goto R9Vim;Zfgll:}goto TSm3b;TSm3b:tFw3k:goto zdrA5;PqG_m:$SaleTypes = [];goto X8fi1;Vowaj:$Deliveries = $this->deliveryRepository->getDeliveries($SaleTypes);goto nL7k_;DI83u:z7WA0:goto Vowaj;ZKLkf:$OrderItems = $Shipping->getProductOrderItems();goto PqG_m;zdrA5:$Delivery = current($Deliveries);goto TWjph;X8fi1:foreach ($OrderItems as $OrderItem) {goto unSe2;zu4S0:k170C:goto IxH9a;unSe2:$ProductClass = $OrderItem->getProductClass();goto gaCUw;gaCUw:$SaleType = $ProductClass->getSaleType();goto UQDGA;UQDGA:$SaleTypes[$SaleType->getId()] = $SaleType;goto zu4S0;IxH9a:}goto DI83u;TWjph:return $Delivery;goto EZRpB;EZRpB:}}